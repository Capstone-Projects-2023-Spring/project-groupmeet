"use strict";(self.webpackChunktu_cis_4398_docs_template=self.webpackChunktu_cis_4398_docs_template||[]).push([[3961],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},l="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),l=c(n),d=a,g=l["".concat(p,".").concat(d)]||l[d]||m[d]||s;return n?r.createElement(g,o(o({ref:t},u),{},{components:n})):r.createElement(g,o({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[l]="string"==typeof e?e:a,o[1]=i;for(var c=2;c<s;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5531:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const s={sidebar_position:1},o=void 0,i={unversionedId:"system-architecture/design",id:"system-architecture/design",title:"design",description:"Purpose",source:"@site/docs/system-architecture/design.md",sourceDirName:"system-architecture",slug:"/system-architecture/design",permalink:"/project-groupmeet/docs/system-architecture/design",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Spring/project-groupmeet/edit/main/documentation/docs/system-architecture/design.md",tags:[],version:"current",lastUpdatedBy:"Athan Kim",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"System Architecture",permalink:"/project-groupmeet/docs/category/system-architecture"},next:{title:"API Specification",permalink:"/project-groupmeet/docs/category/api-specification"}},p={},c=[],u={toc:c};function l(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Purpose")),(0,a.kt)("p",null,"The Design Document - Part I Architecture describes the software architecture and how the requirements are mapped into the design. This document will be a combination of diagrams and text that describes what the diagrams are showing."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Requirements")),(0,a.kt)("p",null,"In addition to the general requirements the Design Document - Part I Architecture will contain:"),(0,a.kt)("p",null,"A description the different components and their interfaces. For example: client, server, database."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Class Diagrams"),"\n",(0,a.kt)("strong",{parentName:"p"},"Diagram 1")),(0,a.kt)("mermaid",{value:'classDiagram\n    MyApp--\x3eMyHomePage\n    MyHomePage --|> StatefulWidget\n    note for StatefulWidget "Library in Flutter"\n    _MyHomePageState --|> State\n    note for State "Library in Flutter"\n    _MyHomePageState<--MyHomePage\n\n    class MyApp{\n      -key\n      +build(context)\n    }\n\n    class MyHomePage{\n      +title\n      +createState()\n    }\n\n    class _MyHomePageState{\n        +DatabaseReference\n        +_emailCont\n        +_passwordCont\n        +userCredential\n        +uid\n        +login()\n        +logout()\n        +build(context)\n    }\n\n    AccountInfo --|> StatefulWidget\n    _AccountInfoState --|> State\n    AccountInfo--\x3e_AccountInfoState\n    \n    class AccountInfo{\n        +title\n        +createState()\n    }\n\n    class _AccountInfoState{\n        +build(context)\n    }\n\n    CreateAccount --|> StatefulWidget\n    _CreateAccountState --|> State\n    CreateAccount--\x3e_CreateAccountState\n\n    class CreateAccount{\n        +title\n        +createState()\n    }\n\n    class _CreateAccountState{\n        +_emailController\n        +_passwordController\n        +_fnameController\n        +_lnameController\n        +ref\n        +uid\n        +createUserProfile()\n        +build()\n    }'}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Sequence Diagrams"),"\n",(0,a.kt)("strong",{parentName:"p"},"Use Case 1: Registration")),(0,a.kt)("mermaid",{value:"sequenceDiagram\n    actor User\n    User->>GroupMeet: Open application\n    User->>+GroupMeet: Registers using form field\n    GroupMeet->>+FirebaseAuthentication: createUserWithEmailAndPassword()\n    FirebaseAuthentication->>+RealtimeDatabase: Creates a new entry\n    RealtimeDatabase--\x3e>-FirebaseAuthentication: Creation Successful\n    FirebaseAuthentication--\x3e>-GroupMeet: Account Created\n    GroupMeet--\x3e>-User: Prompts to confirm email address\n    User->>+GroupMeet: Validates email address\n    GroupMeet--\x3e>-User: Confirms validation, thanks user"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Use Case 2: Login")),(0,a.kt)("mermaid",{value:"sequenceDiagram\n    actor User\n    User->>GroupMeet: Open application\n    User->>+GroupMeet: Login\n    GroupMeet->>+FirebaseAuthentication: signInWithEmailAndPassword()\n    FirebaseAuthentication->>+RealtimeDatabase: Queries Database\n    RealtimeDatabase--\x3e>-FirebaseAuthentication: Query Successful\n    FirebaseAuthentication--\x3e>-GroupMeet: Account found\n    GroupMeet->>+RealtimeDatabase: Queries for any linked social media\n    RealtimeDatabase--\x3e>-GroupMeet: No results found\n    GroupMeet--\x3e>-User: Prompts user to link social media\n    User->>+GroupMeet: Validates social media accounts\n    GroupMeet->>+RealtimeDatabase: adds accounts to entry\n    RealtimeDatabase--\x3e>-GroupMeet: entry updated\n    GroupMeet--\x3e>-User: Thanks user for information"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Use Case 3: Event Creation")),(0,a.kt)("mermaid",{value:"sequenceDiagram\n    actor User\n    participant GroupMeet App\n    participant Firebase Authentication\n    participant Realtime Database\n\n    User->>+ GroupMeet App: login()\n    GroupMeet App->>+Firebase Authentication: signInWithEmailAndPassword()\n    User->>+GroupMeet App: Presses button to create a new group\n    GroupMeet App --\x3e> User: Prompts user for group information\n    User->>+GroupMeet App: Enters group information\n    GroupMeet App->>+Realtime Database : Update information to group settings"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Use Case 4: Invite Other Users")),(0,a.kt)("mermaid",{value:"sequenceDiagram\n    actor User1\n    actor User2\n    participant GroupMeet App\n    participant Realtime Database\n    \n    User1->>+GroupMeet App: Presses button to create a new group\n    GroupMeet App --\x3e> User1: Prompts user for group information\n    User1->>+GroupMeet App: Enters group information\n    GroupMeet App->>+Realtime Database : Update information to group settings\n    GroupMeet App ->>+ GroupMeet App: QR code/link/code is generated\n    User2->>+ User2: Scan the QR code and click the link\n    User2->>+ GroupMeet App: Join scheduling group"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Use Case 5: Time Block Selection")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Use Case 6: Last Second Changes")),(0,a.kt)("mermaid",{value:'sequenceDiagram\n    actor Group\n    actor UserX\n    actor UserY\n    participant GroupMeet App\n\n    Group->>GroupMeet App: All users join the group\n    GroupMeet App->>+ GroupMeet App: Static Calendar is generated with everyone\'s schedules\n    UserX->>GroupMeet App: Selects "green" time (where everyone is available), clicking on the time and proposing it\n    GroupMeet App->>Group: Sends notifications to all members, asking for time approval\n    Group->>GroupMeet App: All users approve meeting time\n    UserY->>GroupMeet App: User later realizes that they actually cannot make that time\n    UserY->>GroupMeet App: Cancels the current meeting time\n    GroupMeet App->>Group: Sends notifications to all members\n    GroupMeet App->>Group: Notification includes notice of cancellation and suggestion for next best time to meet\n'}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Use Case 7: Modification of Project Lifespan")),(0,a.kt)("mermaid",{value:"sequenceDiagram\n    actor User\n    actor UserX\n    participant System\n\n    User->>System: Logs in\n    User->>System: Navigates to Group Settings\n    User->>System: Selects Longevity\n    System->>User: Prompts user with add new, change existing, or delete current timeline options\n    User->>System: Chooses Change Existing\n    System->>User: Prompts user with calendar\n    User->>System: User selects new timeline date\n    User->>System: User saves new timeline\n    System->>UserX: Sends message to Group Chat with new timeline adjustments\n    UserX->>System: Receives message from System\n    System->>User: Confirms change of timeline"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Use Case 8: Push Notifications and Reminders")),(0,a.kt)("mermaid",{value:'sequenceDiagram\n    actor User\n    participant GroupMeet App\n    participant Message Server\n\n    GroupMeet App->>User: Receives a meeting reminder message\n    User->>GroupMeet App: Taps on the message\n    GroupMeet App->>Message Server: Fetches details about the meeting\n    Message Server->>GroupMeet App: Return details about the meeting\n    GroupMeet App->>User: Shows a pop-up message with meeting details\n    User->>GroupMeet App: Taps on the active status\n    GroupMeet App->>User: Shows a description of the status\n    User->>GroupMeet App: Clicks on the "X" button\n    GroupMeet App->>User: Closes the pop-up menu\n    User->>GroupMeet App: Returns to the app\'s home page\n    GroupMeet App->>User: Brings user back to homepage'}),(0,a.kt)("p",null,"Describe algorithms employed in your project, e.g. neural network paradigm, training and training data set, etc."),(0,a.kt)("p",null,"If there is a database:"),(0,a.kt)("p",null,"**Entity-relation diagram"),(0,a.kt)("mermaid",{value:"erDiagram\n    Users{\n        string uid \n        string name\n        string email    \n        Object socialMedia[]\n        string teamIds[]\n    }\n    Teams{\n        string teamId \n        string teamName\n        string teamAdmin\n        string uids[]\n    }\n    Users }|..|{ Teams: have"}),(0,a.kt)("p",null,"Table design."),(0,a.kt)("p",null,"A check list for architecture design is attached here ",(0,a.kt)("a",{parentName:"p",href:"https://templeu.instructure.com/courses/106563/files/16928870/download?wrap=1",title:"architecture_design_checklist.pdf"},"architecture","_","design","_","checklist.pdf"),"\xa0 and should be used as a guidance."))}l.isMDXComponent=!0}}]);