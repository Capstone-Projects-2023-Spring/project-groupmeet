"use strict";(self.webpackChunktu_cis_4398_docs_template=self.webpackChunktu_cis_4398_docs_template||[]).push([[6654],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>f});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(a),d=i,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||r;return a?n.createElement(f,l(l({ref:t},c),{},{components:a})):n.createElement(f,l({ref:t},c))}));function f(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},3144:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var n=a(7462),i=(a(7294),a(3905));const r={sidebar_position:1},l="Activities",o={unversionedId:"development-plan/activities",id:"development-plan/activities",title:"Activities",description:"Requirements Gathering",source:"@site/docs/development-plan/activities.md",sourceDirName:"development-plan",slug:"/development-plan/activities",permalink:"/project-groupmeet/docs/development-plan/activities",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Spring/project-groupmeet/edit/main/documentation/docs/development-plan/activities.md",tags:[],version:"current",lastUpdatedBy:"KAAzadi",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Software Development Plan",permalink:"/project-groupmeet/docs/category/software-development-plan"},next:{title:"Tasks",permalink:"/project-groupmeet/docs/development-plan/tasks"}},s={},p=[{value:"Requirements Gathering",id:"requirements-gathering",level:2},{value:"Top-level Design",id:"top-level-design",level:2},{value:"Detailed Design",id:"detailed-design",level:2},{value:"Test",id:"test",level:2}],c={toc:p};function u(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"activities"},"Activities"),(0,i.kt)("h2",{id:"requirements-gathering"},"Requirements Gathering"),(0,i.kt)("p",null,"For the requirements gathering portion of the initial development and planning phase, members of the team researched the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Compatible databases for the app to be hosted on"),(0,i.kt)("li",{parentName:"ul"},"Functionally similar entities such as Calendar.com, and official calendar integrations such as Microsoft Office's Calendar and Google Calendar"),(0,i.kt)("li",{parentName:"ul"},"Possible calendar sources that could be integrated into the app for syncing with a convenient user experience in mind")),(0,i.kt)("h2",{id:"top-level-design"},"Top-level Design"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Establish Google Firebase for a cloud-hosted database that can host the app"),(0,i.kt)("li",{parentName:"ol"},"Generate foundational app features such as welcome, account creation and login pages"),(0,i.kt)("li",{parentName:"ol"},"Group creation and code/link sharing feature development"),(0,i.kt)("li",{parentName:"ol"},"Create group finalization algorithm(s) and develop procedures performed at this stage"),(0,i.kt)("li",{parentName:"ol"},"Establish calendar sync integration with Google Calendar"),(0,i.kt)("li",{parentName:"ol"},"Develop miscellaneous features to fulfill scenarios that could occur in user flows"),(0,i.kt)("li",{parentName:"ol"},"Notification integration at certain stages of user flow")),(0,i.kt)("h2",{id:"detailed-design"},"Detailed Design"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Establish Google Firebase for a cloud-hosted database that can host the app app",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Hosting our application on Google Firebase for login authentication and overall uptime"))),(0,i.kt)("li",{parentName:"ol"},"Generate foundational app features such as welcome, account creation and login pages",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Making sure that foundational features are established and connecting pages for the user flow so that user experience is kept as a top priority throughout development."),(0,i.kt)("li",{parentName:"ul"},"Users will be able to link their social media profiles and/or contact informations to be shared later"),(0,i.kt)("li",{parentName:"ul"},"Users will be able to create static profiles where they can preemptively sync their calendars or chart out their availabilities"))),(0,i.kt)("li",{parentName:"ol"},"Group creation and code/link sharing feature development",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Seeking to include unique code/QR code/link share integrations for ease of use"),(0,i.kt)("li",{parentName:"ul"},"Establishing user-to-user interaction and group generation so that users can sync their calendars and share contact information"))),(0,i.kt)("li",{parentName:"ol"},"Create group finalization algorithm(s) including static calendar generation",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Upon group finalization, a joined calendar is generated by GroupMeet to display all available times",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If no overlaps exist, then suggest next best options, such as two separate times or times where only one person is unavailable"))))),(0,i.kt)("li",{parentName:"ol"},"Establish calendar sync integration with Google Calendar",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Allow users to easily sync their GroupMeet scheduling with Google Calendar",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"GroupMeet will automatically adjust for times with privacy in mind"))))),(0,i.kt)("li",{parentName:"ol"},"Develop miscellaneous features to fulfill scenarios that could occur in user flows",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Account for situation where a user has to cancel the meeting due to unforseen unavailability",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"In this case, suggest the next best time"))),(0,i.kt)("li",{parentName:"ul"},"Account for situation where a user did not provide any availability",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"In this case, give that user a list of the available times to choose from based on the availability of the other members of the group"))))),(0,i.kt)("li",{parentName:"ol"},"Notification integration at certain stages of user flow",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Send notifications to users at specific times of user flow",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"For example, send notifications to users 1 day before meeting time asking for their RSVP"),(0,i.kt)("li",{parentName:"ul"},"For example, send notifications to users 15 minutes before meeting time")))))),(0,i.kt)("h2",{id:"test"},"Test"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"All tests will be done with the Flutter framework testing suite."),(0,i.kt)("li",{parentName:"ul"},"Unit testing will be created to test foundational features of the application to measure for basic functionality",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"After all major development sessions conclude, functionality tests will be performed to avoid app-breaking contributions"))),(0,i.kt)("li",{parentName:"ul"},"Widget testing will ensure each widget will work as intended in a medium-scale overview"),(0,i.kt)("li",{parentName:"ul"},"Integration testing will check the application on a large scale, making sure multiple widgets interact with each other as expected in given conditions."),(0,i.kt)("li",{parentName:"ul"},"The team will perform tests on all calendar syncing/calendar creation features and implementations with a variety of different calendar inputs and sample groups")))}u.isMDXComponent=!0}}]);