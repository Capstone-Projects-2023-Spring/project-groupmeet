"use strict";(self.webpackChunktu_cis_4398_docs_template=self.webpackChunktu_cis_4398_docs_template||[]).push([[7349],{3905:(e,t,a)=>{a.d(t,{Zo:()=>i,kt:()=>c});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function p(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?p(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):p(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},p=Object.keys(e);for(r=0;r<p.length;r++)a=p[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(r=0;r<p.length;r++)a=p[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),m=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},i=function(e){var t=m(e.components);return r.createElement(o.Provider,{value:t},e.children)},u="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},N=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,p=e.originalType,o=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),u=m(a),N=n,c=u["".concat(o,".").concat(N)]||u[N]||k[N]||p;return a?r.createElement(c,l(l({ref:t},i),{},{components:a})):r.createElement(c,l({ref:t},i))}));function c(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var p=a.length,l=new Array(p);l[0]=N;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[u]="string"==typeof e?e:n,l[1]=s;for(var m=2;m<p;m++)l[m]=a[m];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}N.displayName="MDXCreateElement"},8614:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>p,metadata:()=>s,toc:()=>m});var r=a(7462),n=(a(7294),a(3905));const p={sidebar_position:1,description:"Our API"},l="public class HomeScreen",s={unversionedId:"api-specification/design-api-intro",id:"api-specification/design-api-intro",title:"public class HomeScreen",description:"Our API",source:"@site/docs/api-specification/design-api-intro.md",sourceDirName:"api-specification",slug:"/api-specification/design-api-intro",permalink:"/project-groupmeet/docs/api-specification/design-api-intro",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Spring/project-groupmeet/edit/main/documentation/docs/api-specification/design-api-intro.md",tags:[],version:"current",lastUpdatedBy:"tweiss9",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Our API"},sidebar:"docsSidebar",previous:{title:"API Specification",permalink:"/project-groupmeet/docs/category/api-specification"},next:{title:"Test Procedures",permalink:"/project-groupmeet/docs/category/test-procedures"}},o={},m=[],i={toc:m};function u(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},i,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"public-class-homescreen"},"public class HomeScreen"),(0,n.kt)("p",null,"This class is the first page the user sees upon logging in, and helps them navigate the application."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"firebaseDatabas: Stores a reference to the database",(0,n.kt)("br",{parentName:"em"})),"firebaseAuth: Stores a reference to the authenticator  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"public HomeScreen(firebaseDatabase, firebaseAuth)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"constructor for the class  "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"parameters")," - firebaseDatabase, firebaseAuth - information needed to instantiate the class")),(0,n.kt)("h1",{id:"private-class-_homescreen"},"private class _HomeScreen"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"First page that is generated when the application opens.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),"\n",(0,n.kt)("em",{parentName:"p"},"displayedGroups: List that contains all groups the user is in."),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"observing: boolean to state whether the state is currently observing"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"code: String that contains the code fo the user.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"updateDatabase(groupID)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"updates the database with user information"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"parameters")," - groupID - Updates database with new information")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"showQR(context)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Allows the user to scan or enter a QR code/manual code"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"parameters")," - context - The page the user is currently on")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"showAdd(context)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Allows the user to add a new group  "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"parameters")," - context - The page the user is currently on")))),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"showSettings(context)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Allows the user to go the settings page"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"parameters")," - context - The page the user is currently on")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"selectedGroup(int group)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Takes user to the appropriate group page depending on what they clicked."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"parameters")," - group - The group the user clicked.")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"observeGroups()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Allows the user to view all groups they are a part of")),(0,n.kt)("h1",{id:"public-class-calendarpage"},"public class CalendarPage"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Purpose"),(0,n.kt)("br",{parentName:"p"}),"\n","The page that allows the user to view their calendar  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"group: A map of dynamic and dynamic type that represents the group."),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"title: A string representing the title of the page."),"  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"createState()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Returns a state object for the CalendarPage.")),(0,n.kt)("h1",{id:"private-class-_calendarpage"},"private class _CalendarPage"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"allEvents: A list of Appointment objects representing all the events in the calendar.")," "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"getData()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronously gets all the calendar events and round meetings for the members in the group.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"chosenDateAddedToCalendar(DateTime begTime, DateTime finTime, String meetingName)")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronously adds a new meeting to the calendar.  "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Parameters")," begTime, finTime, meetingName - Adds the appropriate information to the page's calendar.")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"_handleSignIn()")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronously handles signing into Google.")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"getPrimaryCalendar()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronously retrieves the primary calendar for the current user.")),(0,n.kt)("h1",{id:"public-class-linkcalendar"},"public class LinkCalendar"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"allEvents: A list of Appointment objects representing all the events in the calendar.")," "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"getData()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronously gets all the calendar events and round meetings for the members in the group.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"chosenDateAddedToCalendar(DateTime begTime, DateTime finTime, String meetingName)")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronously adds a new meeting to the calendar.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"_handleSignIn()")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronously handles signing into Google.")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"getPrimaryCalendar()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronously retrieves the primary calendar for the current user.  ")),(0,n.kt)("h1",{id:"public-class-codereception"},"public class CodeReception"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Purpose"),(0,n.kt)("br",{parentName:"p"}),"\n","The page that allows the user to receive a QR code and handle it"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"title: A string representing the title of the page."),"  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"createState()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Returns a state object for CodeReception.")),(0,n.kt)("h1",{id:"private-class-_codereceptionstate"},"private class _CodeReceptionState"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"groupId: TextEditingController that reads the incoming group information")," "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"updateDatabase()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronously updates the database with the incoming group information.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"camSanner()")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Allows for access to the camera to read the QR code and update the database accordingly.  ")),(0,n.kt)("h1",{id:"public-class-codesharing"},"public class CodeSharing"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Purpose"),(0,n.kt)("br",{parentName:"p"}),"\n","The page that allows the user to share a QR code to others"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"title: A string representing the title of the page."),"  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"createState()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Returns a state object for CodeSharing.")),(0,n.kt)("h1",{id:"private-class-_codesharingstate"},"private class _CodeSharingState"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),"  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"getCode()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronously obtains the code from the database to be used.  ")),(0,n.kt)("h1",{id:"public-class-displaycode"},"public class DisplayCode"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Purpose"),(0,n.kt)("br",{parentName:"p"}),"\n","The page that allows the user to display the code for others to utilize"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"groupName: A dynamic list that contains the group names."),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"nameId: A dynamic list that contains the ID names."),"  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),"\n",(0,n.kt)("em",{parentName:"p"},"buildList(List groupName, List nameId)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Creates the group code in a presentable manner for the user to see it"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"parameters")," groupName, nameId - Lists that allow for the QR code to be created."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"returns")," a Widget to be used to display the QR code  ")),(0,n.kt)("h1",{id:"public-class-display"},"public class Display"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Purpose"),(0,n.kt)("br",{parentName:"p"}),"\n","The page that allows the user to display the code for others to utilize"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"groupName: A dynamic list that contains the group names."),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"nameId: A dynamic list that contains the ID names."),"  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),"  "),(0,n.kt)("h1",{id:"public-class-qr"},"public class Qr"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Purpose"),(0,n.kt)("br",{parentName:"p"}),"\n","Allows for the scanning of the QR code"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"scanning: A boolean that determines whether the code is being scanned."),"  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"scanQR(Buildcontext context)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Scans the QR code given the current state of the application.  ")),(0,n.kt)("h1",{id:"public-class-addevent"},"public class AddEvent"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Purpose"),(0,n.kt)("br",{parentName:"p"}),"\n","The page that allows the user to share a QR code to others"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"title: A string representing the title of the page."),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"ref: a Database reference that refers to the user's currently stored events."),"  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"createState()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Returns a state object for AddEvent.")),(0,n.kt)("h1",{id:"private-class-_addeventstate"},"private class _AddEventState"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"start: the start date of the custom event"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"end: The end date of the custome event"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"ref: a Database reference that refers to the user's currently stored events."),"  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),"  "),(0,n.kt)("h1",{id:"public-class-allgroups"},"public class AllGroups"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Purpose"),(0,n.kt)("br",{parentName:"p"}),"\n","The page that displays all groups to the user."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"uid: The user's database ID"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"ref: A Database reference that refers to the user's currently stored events."),"  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"createState()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Returns a state object for AllGroups.")),(0,n.kt)("h1",{id:"private-class-_allgroupsstate"},"private class _AllGroupsState"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"uid: The user's database ID"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"ref: A Database reference that refers to the user's currently stored events."),"  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"grabGroups()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Obtains and returns the groups for the user from the database to be displayed to the user"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Returns")," a Future List of Maps that contain all groups and their pertinent information.")),(0,n.kt)("h1",{id:"public-class-groupcreation"},"public class GroupCreation"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Purpose"),(0,n.kt)("br",{parentName:"p"}),"\n","The page that allows the user to create a new page."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"userID: The user's database ID"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"firebaseDatabase: A Database reference that refers to the user's currently stored events."),"  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"createState()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Returns a state object for GroupCreation.")),(0,n.kt)("h1",{id:"private-class-_groupcreationstate"},"private class _GroupCreationState"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),"  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"createMaterialColor(Color color)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Creates the color material to be used when displaying the group"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Parameters")," color - The color chosen by the user."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Returns")," A MaterialColor object that contains the information needed to display the color in the future.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"buttonPress(BuildContext context)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Parameters")," context - The page seen by the user."),(0,n.kt)("li",{parentName:"ul"},"An Asynchronous method that creates the group when the user pressed the button.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"_openDialog(String title, Widget content)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Creates a popup for the user to navigate.  "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Parameters")," title, content - The information needed to create the information in the popup.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"colorTapped()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Indicates which color code was selected by the user  ")),(0,n.kt)("h1",{id:"public-class-grouphomepage"},"public class GroupHomePage"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Purpose"),(0,n.kt)("br",{parentName:"p"}),"\n","Displays all information for the group to the user."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"title: String that contains title of the page"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"databaseReference - reference to the database to get all related information"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"myGroup - a Map of dynamic, dynamic that contains any additional information about the group."),"   "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"createState()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Returns a state object for GroupHomePage.")),(0,n.kt)("h1",{id:"private-class-_homescreen-1"},"private class _HomeScreen"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),"\n",(0,n.kt)("em",{parentName:"p"},"databaseReference - reference to the database to get all related information"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"instaCount - Number of users using Instagram"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"fbCount - Number of users using Facebook"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"discordCount - Number of users using Discore"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"messagesCount - Number of users using Texting"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"snapCount - Number of users using Snapchat"),"  "),(0,n.kt)("p",null,"  ",(0,n.kt)("em",{parentName:"p"},"instaHandles - List of all group member instagram information"),"\n",(0,n.kt)("em",{parentName:"p"},"fbHandles - List of all group member Facebook information"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"discordHandles - List of all group member Discord information"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"messagesHandles - List of all group member Texting information"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"snapHandles - List of all group member Snapchat information"),"  "),(0,n.kt)("p",null,"  ",(0,n.kt)("em",{parentName:"p"},"chosenPlatform - platform with the most usage"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"chosenHandles - List of all group member chosen information"),"  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"grabGroupMembers()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronously pulls data from the database"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Returns")," - List of all group members  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"leaveGroup()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Allows the user to leave the group*  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"getData()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronously pulls data from the database  "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Returns")," - HashMap of all group information  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"getHandles()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronously pulls data from the database"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Returns")," - HashMap of all social media information  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"getEventList()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronously pulls data from the database"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Returns")," - HashMap of all events from the users  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"FindNextBestDate()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronously pulls data from the database"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Returns")," - First available date available to all group members.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"GetFirstDate()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronously pulls data from the database"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Returns")," - Date of the first available time for all users to meet.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"RemoveCurrentDate()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronously pulls data from the database"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Returns")," - 1 if the method was successful, -1 if unsuccessful.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"getQr()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Creates a QR code to be used.  ")),(0,n.kt)("h1",{id:"public-class-groupmember"},"public class GroupMember"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Purpose"),(0,n.kt)("br",{parentName:"p"}),"\n","The page that allows the user to create a new page."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"uid: The user's database ID"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"name: The user's name"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"email: The user's name"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"snapchat: The user's snapchat"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"discord: The user's discord"),"\n",(0,n.kt)("em",{parentName:"p"},"sms: The user's sms number"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"instagram: The user's instagram"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"facebook: The user's facebook"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"hasCalendar: A boolean showing whether the member has integrated their calendar."),"  "),(0,n.kt)("h1",{id:"public-class-groupview"},"public class GroupView"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Purpose"),(0,n.kt)("br",{parentName:"p"}),"\n","The page that allows the user to view their group."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"group: The associated Round Group"),"  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"createState()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Returns a state object for GroupView.")),(0,n.kt)("h1",{id:"private-class-_groupview"},"private class _GroupView"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"appointment: Current time of the next meeting"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"parsedMembers: A list containing all current member information"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"rsvped: A list of members who have confirmed."),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"snapCount: number of snapchat users"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"smsCount: number of texting users"),"\n",(0,n.kt)("em",{parentName:"p"},"discordCount: number of discord users"),"\n",(0,n.kt)("em",{parentName:"p"},"instacount: number of instagram users"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"fbCount: number of facebook users"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"calCount: number of users with integrated calendars"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"isObserving: whether the user is a member"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"isAdmin: whether the user is the creator of the group"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"group: the associate Round group."),"  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"GetFirstDate()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronously pulls data from the database"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Returns")," - Date of the first available time for all users to meet.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"observeGroup()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Determines whether the current viewer is an admin.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"triggerDelete()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronous method that deletes the group.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"popMain()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"returns to the previous page.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"leaveGroup()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronously removes the user from the group  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"calculateSocialCounts()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Tabulates how many people are using each platform  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"profileTap(int index)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"determines which profile was selected"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Returns")," - Integer showing which platform was tapped.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"socialTap()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"determines which social was tapped."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Returns")," - Integer showing which social media information to display.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"_openDialog(String title, Widget content)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Creates a popup for the user."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Parameters")," title, content - information needed to create the dialogue")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"socialWidget(String name, int count, BuildContext context)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Creates a Widget for the specified social media"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Parameters")," name, count, context - information needed to create the widget."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Returns")," - A widget displaying the appropriate social media information.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"handleCalendarRequest()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronously handles requests regarding the calendar")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"RemoveCurrentDate()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronously pulls data from the database"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Returns")," - 1 if the method was successful, -1 if unsuccessful.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"getEventList()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronously pulls data from the database"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Returns")," - HashMap of all events from the users  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"FindNextBestDate()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronously pulls data from the database"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Returns")," - First available date available to all group members.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"calendar()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronously pulls data from the database")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"share()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"displays the group information for others to use.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"showRSVPList()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"displays all users expected to make the meeting.  ")),(0,n.kt)("h1",{id:"public-class-explainer"},"public class Explainer"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Purpose"),(0,n.kt)("br",{parentName:"p"}),"\n","The page that briefly explains Round to the user."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"pageNo: int that contains information about the user's device"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"headers: array of headers used throughout"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"texts: array of text used throughout"),"  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"buttonPress(BuildContext context)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Observer to see if a button is pressed."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Parameters")," context - current page information for the user.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"createState()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Returns a state object for GroupView.  ")),(0,n.kt)("h1",{id:"public-class-signin"},"public class SignIn"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Purpose"),(0,n.kt)("br",{parentName:"p"}),"\n","The page that allows the user to sign in with an existing account."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"firebaseDatabase: Database information for the user."),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"firebaseAuth: Authenticator for the user."),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"email: the user's email."),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"password: the user's password."),"  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"buttonPress(BuildContext context)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Observer to see if a button is pressed."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Parameters")," context - current page information for the user.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"SignIn(BuildContext context)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Uses credentials to sign the user in."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Parameters")," context - current page information for the user.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"changedEmail(String string)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Recognizes whether a new email is used."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Parameters")," string - new string to be used.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"changedPassword(String string)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Recognizes whether a new password is used."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Parameters")," string - new string to be used.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"createState()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Returns a state object for GroupView.  ")),(0,n.kt)("h1",{id:"public-class-signup"},"public class SignUp"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Purpose"),(0,n.kt)("br",{parentName:"p"}),"\n","The page that allows the user to sign Up with an existing account."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"firebaseDatabase: Database information for the user."),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"firebaseAuth: Authenticator for the user."),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"name: the user's name."),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"email: the user's email."),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"password: the user's password."),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"ref: A database reference to store the newly created data."),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"uid: the user's uid."),"  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"buttonPress(BuildContext context)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Observer to see if a button is pressed."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Parameters")," context - current page information for the user.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"SignIn(BuildContext context)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Uses credentials to sign the user in."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Parameters")," context - current page information for the user.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"changedName(String string)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Recognizes whether a new name is used."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Parameters")," string - new string to be used.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"changedEmail(String string)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Recognizes whether a new email is used."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Parameters")," string - new string to be used.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"changedPassword(String string)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Recognizes whether a new password is used."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Parameters")," string - new string to be used.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"createState()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Returns a state object for GroupView.  ")),(0,n.kt)("h1",{id:"public-class-social-onboarding"},"public class Social Onboarding"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Purpose"),(0,n.kt)("br",{parentName:"p"}),"\n","The page that allows the user to enter their desired social media information."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"firebaseDatabase: Database information for the user."),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"firebaseAuth: Authenticator for the user."),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"insta: the user's instagram."),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"fb: the user's facebook."),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"discord: the user's discord."),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"snap: the user's snapchat."),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"sms: the user's sms number."),"  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"buttonPress(BuildContext context)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Observer to see if a button is pressed."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Parameters")," context - current page information for the user.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"facebookChanged(String string)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Recognizes whether a new facebook is used."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Parameters")," string - new string to be used.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"instagramChanged(String string)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Recognizes whether a new instagram is used."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Parameters")," string - new string to be used.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"snapChanged(String string)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Recognizes whether a new snapchat is used."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Parameters")," string - new string to be used. ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"discordChanged(String string)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Recognizes whether a new discord is used."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Parameters")," string - new string to be used.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"smsChanged(String string)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Recognizes whether a new sms number is used."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Parameters")," string - new string to be used.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"createState()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Returns a state object for GroupView.  ")),(0,n.kt)("h1",{id:"public-class-about"},"public class About"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Purpose"),(0,n.kt)("br",{parentName:"p"}),"\n","The page that displays information about Round."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"title: The title of the page"),"  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"createState()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Returns a state object for AllGroups.")),(0,n.kt)("h1",{id:"public-class-aboutstate"},"public class AboutState"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"_googleSignIn: Signs in to Google Calendar for the user."),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"ref: A Database reference that refers to the user's currently stored events."),"  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"getPrimaryCalendar()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Obtains all events from the user's Google Calendar, and then stores them in the database.  ")),(0,n.kt)("h1",{id:"public-class-editaccountinfo"},"public class EditAccountInfo"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Purpose"),(0,n.kt)("br",{parentName:"p"}),"\n","The page that allows the user to edit their account information."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"title: The name of the page."),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"ref: A Database reference that refers to the user's currently stored events."),"  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"createState()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Returns a state object for AllGroups.")),(0,n.kt)("h1",{id:"private-class-_editaccountinfostate"},"private class _EditAccountInfoState"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"fname: The user's first name"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"lname: The user's last name"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"email: The user's first email"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"ref: A Database reference that refers to the user's currently stored events."),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"_firstNameController: The text controller that reads the user's first name"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"_lastNameController: The text controller that reads the user's last name"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"_emailController: The text controller that reads the user's email"),"  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"getData()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronous call that obtains user information from the database to be edited  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"saveChanges()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronous call that stores user information to the database.  ")),(0,n.kt)("h1",{id:"public-class-settings"},"public class Settings"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Purpose"),(0,n.kt)("br",{parentName:"p"}),"\n","The page that allows the user to edit their settings."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"firebaseDatabase: Database information for the user."),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"firebaseAuth: Authenticator for the user."),"  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"createState()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Returns a state object for AllGroups.")),(0,n.kt)("h1",{id:"private-class-_editaccountinfostate-1"},"private class _EditAccountInfoState"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Properties"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"name: The user's name"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"email: The user's first email"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"snap: The user's snapchat"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"discord: The user's discord"),"\n",(0,n.kt)("em",{parentName:"p"},"messages: The user's sms number"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"isnta: The user's instagram"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"fb: The user's facebook"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"cal: A boolean showing whether the member has integrated their calendar."),"\n",(0,n.kt)("em",{parentName:"p"},"newName: The user's update name"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"newEmail: The user's updated email"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"observing: A boolean to determine whether the user viewing the page."),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"ref: A Database reference that refers to the user's currently stored events."),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"_firstNameController: The text controller that reads the user's first name"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"_lastNameController: The text controller that reads the user's last name"),(0,n.kt)("br",{parentName:"p"}),"\n","",(0,n.kt)("em",{parentName:"p"},"_emailController: The text controller that reads the user's email"),"  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Methods"),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"changedName(String string)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Recognizes whether a new name is used."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Parameters")," string - new string to be used.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"changedEmail(String string)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Recognizes whether a new email is used."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Parameters")," string - new string to be used.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"saveInfo()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronous call that stores user information to the database.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"ObserveData()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Handles whether the user is an observer or not.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"_handleSignIn()")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronously handles signing into Google.")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"getPrimaryCalendar()"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronously retrieves the primary calendar for the current user.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"saveSocial(String media)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Saves the social information to the appropriate platform.  "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Parameters")," media - The handle being saved.")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"selectedSocial(String social)"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"handles the currently selected social media platform.  "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Parameters")," media - The handle being handled.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"_handleCal(BuildContext context)")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"handles GoogleCalendar information.  "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"parameters")," context - The current page the user is looking at.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"editProfile()")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Allows the user to edit their profile.  ")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"about(BuildContext context)")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronously shows the user Round's information.  ",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"parameters")," context - The current page the user is looking at.  ")))),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"signOut()")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Asynchronously signs the user out of their account.",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"parameters")," context - The current page the user is looking at.")))))}u.isMDXComponent=!0}}]);